   function [x,y] = myNonLinearBattery(x,u,Ts)
   global SOC_01C OCV_01C
   
% x - Vector Columna 3x1 - Vector de estados
% x(1) = V1[V] / x(2) = V2[V] / x(3) = SOC [de 0(vacio) a 1(cargado)]
% u - Escalar 1x1 - Entrada de corriente [A] 
% Ts- Escalar 1x1 - Periodo de muetreo [s] 
   SOC=x(3);
   
 
   A_SOC=zeros(3,3,66);
   B_SOC=zeros(3,1,66);
   C_SOC=zeros(1,3,66);
   D_SOC=zeros(1,66);
   
   A_SOC(1,1,:)=[-17.550,-27.086,-38.651,-49.197,-64.618,-31.840,-32.182,-43.618,-15.089,-21.282,-11.978,-12.476,-22.956,-11.893,-22.207,-0.7618,-0.7949,-12.880,-11.230,-61.297,-10.926,-11.059,-16.279,-0.9482,-18.210,-0.4986,-0.5199,-0.6654,-0.8046,-0.8809,-0.8037,-0.8789,-0.9862,-0.9624,-68.161,-35.785,-40.133,-50.450,-10.687,-39.328,-27.517,-31.392,-37.420,-0.9271,-0.9332,-0.7612,-0.7490,-0.7503,-0.8481,-0.8421,-0.7818,-0.8216,-10.873,-0.8215,-0.4363,-0.7279,-0.7608,-29.316,-0.9995,-33.995,-15.790,-11.355,-0.6902,-23.051,-0.4969,-0.4076]*0.1;
   A_SOC(2,2,:)=[-0.0281,-0.0323,-0.0337,-0.0385,-0.0730,-0.0309,-0.0342,-0.0374,-0.0327,-0.0590,-0.0331,-0.0335,-0.0338,-0.0263,-0.2803,-0.0256,-0.0263,-0.0250,-0.0186,-0.2236,-0.0225,-0.0221,-0.0182,-0.0125,-0.2297,-0.0106,-0.0096,-0.0094,-0.0127,-0.0387,-0.0175,-0.0223,-0.0256,-0.0291,-0.2135,-0.0243,-0.0245,-0.0261,-0.0252,-0.1578,-0.0131,-0.0162,-0.0214,-0.0219,-0.0401,-0.0177,-0.0177,-0.0207,-0.0242,-0.0599,-0.0194,-0.0202,-0.0230,-0.0263,-0.0676,-0.0196,-0.0211,-0.0390,-0.0404,-11.922,-0.0225,-0.0274,-0.0259,-66.379,-0.0081,-0.0161];
   
   B_SOC(1,1,:)=[0.0238,0.0369,0.0559,0.0499,0.0526,0.0448,0.0461,0.0598,0.0069,0.0094,0.0110,0.0118,0.0231,0.0057,0.0062,0.0065,0.0066,0.0096,0.0059,0.0158,0.0106,0.0104,0.0145,0.0053,0.0054,0.0050,0.0051,0.0050,0.0050,0.0050,0.0050,0.0059,0.0068,0.0050,0.0173,0.0370,0.0476,0.0718,0.0055,0.0108,0.0292,0.0406,0.0511,0.0052,0.0050,0.0050,0.0052,0.0052,0.0050,0.0050,0.0062,0.0068,0.0106,0.0062,0.0050,0.0082,0.0095,0.0852,0.0234,0.0764,0.0747,0.0591,0.0417,0.0807,0.0522,0.0480];
   B_SOC(2,1,:)=[6.99e-04,7.07e-04,6.99e-04,6.86e-04,7.86e-04,7.29e-04,7.32e-04,7.65e-04,6.38e-04,7.35e-04,7.46e-04,7.56e-04,7.94e-04,6.31e-04,0.0018,7.84e-04,8.02e-04,7.84e-04,5.90e-04,0.0017,8.47e-04,8.53e-04,7.74e-04,5.37e-04,0.0015,8.25e-04,7.28e-04,5.39e-04,4.37e-04,3.80e-04,5.51e-04,4.98e-04,4.97e-04,4.99e-04,0.0017,6.31e-04,6.04e-04,6.00e-04,5.44e-04,0.0014,6.34e-04,5.68e-04,5.83e-04,5.40e-04,6.38e-04,5.72e-04,5.26e-04,5.15e-04,5.29e-04,7.52e-04,5.69e-04,5.69e-04,5.78e-04,5.29e-04,5.48e-04,5.94e-04,5.85e-04,8.19e-04,7.57e-04,0.0017,0.0012,0.0013,0.0011,8.04e-04,0.0010,0.0012];
   B_SOC(3,1,:)=-ones(1,66)*(1/(3600*2.9));
   
   C_SOC=-ones(1,3,66);
   C_SOC(1,3,:)=0.8517;
   
   D_SOC=[-0.0286,-0.0276,-0.0252,-0.0270,-0.0266,-0.0224,-0.0225,-0.0219,-0.0300,-0.0286,-0.0263,-0.0264,-0.0243,-0.0288,-0.0282,-0.0265,-0.0265,-0.0260,-0.0273,-0.0268,-0.0243,-0.0247,-0.0242,-0.0271,-0.0270,-0.0250,-0.0255,-0.0268,-0.0266,-0.0265,-0.0252,-0.0255,-0.0253,-0.0267,-0.0263,-0.0210,-0.0197,-0.0176,-0.0272,-0.0271,-0.0219,-0.0205,-0.0199,-0.0285,-0.0286,-0.0283,-0.0289,-0.0293,-0.0305,-0.0304,-0.0307,-0.0313,-0.0308,-0.0343,-0.0343,-0.0369,-0.0385,-0.0234,-0.0347,-0.0284,-0.0283,-0.0319,-0.0331,-0.0343,-0.0422,-0.0411];

   SOC_table=[1,0.9956,0.9898,0.9782,0.9606,0.9463,0.9433,0.9375,0.9259,0.9083,0.8940,0.8910,0.8852,0.8735,0.8561,0.7894,0.7865,0.7806,0.7690,0.7514,0.6848,0.6819,0.6760,0.6644,0.6468,0.5802,0.5773,0.5715,0.5599,0.5423,0.4756,0.4727,0.4669,0.4552,0.4378,0.3710,0.3681,0.3623,0.3507,0.3331,0.2664,0.2635,0.2577,0.2461,0.2286,0.2141,0.2112,0.2054,0.1938,0.1762,0.1618,0.1589,0.1531,0.1415,0.1239,0.1095,0.1066,0.1008,0.0892,0.0878,0.0573,0.0543,0.0485,0.0467,0.0050,0];
   %OCV_table=[4.1750,4.1653,4.1550,4.1370,4.1036,4.1036,4.1010,4.0958,4.0855,4.0572,4.0572,4.0540,4.0476,4.0347,4.0347,3.9453,3.9427,3.9369,3.9266,3.9266,3.8616,3.8597,3.8552,3.8456,3.8456,3.7703,3.7683,3.7600,3.7420,3.7420,3.6635,3.6609,3.6564,3.6487,3.6487,3.6024,3.6011,3.5979,3.5914,3.5914,3.5502,3.5490,3.5444,3.5354,3.5123,3.5123,3.5091,3.5026,3.4904,3.4569,3.4569,3.4531,3.4460,3.4306,3.3887,3.3887,3.3843,3.3772,3.3662,3.3656,3.3437,3.3418,3.3379,3.3379,3.2311,3.2144];
    %load('OCV_VS_SOC_01C.mat','SOC_01C','OCV_01C')  
    
    %cambio de unidades SOC de Ah a 0 a 1
    
    SOC2=(SOC-1)*2.9;
    
    [Near_SOC_value_2,SOC_index_2]=min(abs(SOC_01C - SOC2));
    OCV=OCV_01C(SOC_index_2);
   
  
   %Calculo el Indice que corresponde al SOC actual.
   [Near_SOC_value,SOC_index]=min(abs(SOC_table - SOC));
   
  % if SOC_index < length(OCV_table)
  % m=(OCV_table(SOC_index+1)-OCV_table(SOC_index))/(SOC_table(SOC_index+1)-SOC_table(SOC_index));
  % OCV_Linearized=m*(OCV_table(SOC_index)-SOC)+OCV_table(SOC_index);
  % else
  %   OCV_Linearized=OCV_table(length(OCV_table)); 
  % end
     
   %SOC_index=0;
   %for i=1 : length(SOC_table)-1
   %    minimo=SOC_table(i+1);
   %    medio=(SOC_table(i)+SOC_table(i+1))/2;
   %    maximo=SOC_table(i);
   %   
   %     if and(SOC>=minimo,SOC<=medio)
   %         SOC_index=i+1;
   %         break
   %     elseif and(SOC>=medio,SOC<=maximo)
   %             SOC_index=i;
   %             break
   %     end
   %end
        
   %Actualizo vector de estados
x=x+(A_SOC(:,:,SOC_index)*x+B_SOC(:,1,SOC_index)*u)*Ts;
%y=C_SOC(1,:,SOC_index)*x+D_SOC(1,SOC_index)*u +3.26; %Agregue el offset OCV_0
%y=C_SOC(1,1,SOC_index)*x(1)+C_SOC(1,2,SOC_index)*x(2)+ D_SOC(1,SOC_index)*u + OCV_table(SOC_index); %Versión lut OCV

%y=C_SOC(1,1,SOC_index)*x(1)+C_SOC(1,2,SOC_index)*x(2)+ D_SOC(1,SOC_index)*u + OCV_Linearized;
y=C_SOC(1,1,SOC_index)*x(1)+C_SOC(1,2,SOC_index)*x(2)+ D_SOC(1,SOC_index)*u + OCV;
